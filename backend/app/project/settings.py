"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import ast
import datetime
import json
import os
import sys
from pathlib import Path

from constance import config

import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from django.utils.translation import gettext_lazy as _

from project.base.helpers.environment import get_bool_from_env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

seconds_in_a_week = 7 * 24 * 60 * 60

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ast.literal_eval(os.environ.get('DJANGO_DEBUG', 'True'))

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')

DEFAULT_ADMINS = [
    ('Jacob Sadollahi', 'jacob.sadollahi@gmail.com'),
]

ENVIRONMENT = os.environ.get('ENVIRONMENT', 'DEV')

# Application definition
INSTALLED_APPS = [
    "constance",
    "modeltranslation",
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "drf_yasg",
    "mjml",
    "fullurl",
    "adminsortable2",
    "corsheaders",
    "django_extensions",
    "rest_framework",
    "versatileimagefield",
    "ckeditor",
    "ckeditor_uploader",
    "django_filters",
    "django_json_widget",
    "rangefilter",
    "django_jsonform",

    "project",
    "project.base",
    "project.base.apps.core",
    "project.base.apps.user",
    "project.base.apps.email",
    "project.base.apps.translation",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "project.middleware.JWTAuthenticationMiddleware",
    "project.middleware.LanguageIdentificationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get("POSTGRES_DB"),
        'USER': os.environ.get("POSTGRES_USER"),
        'PASSWORD': os.environ.get("POSTGRES_PASSWORD"),
        'HOST': os.environ.get("DB_POOL_HOST"),
        'PORT': os.environ.get("DB_POOL_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "Europe/Zurich"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale"), ]

USE_L10N = False

LANGUAGES = (
    ("en", _("English")),
    ("de", _("German")),
)

# Model translation config
MODELTRANSLATION_DEFAULT_LANGUAGE = "en"

MODELTRANSLATION_LANGUAGES = [
    "en", "de",
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

MEDIA_URL = "/media/"

STATIC_ROOT = "/static-files"

MEDIA_ROOT = "/media-files"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_MAX_DIGITS = 12
DEFAULT_DECIMAL_PLACES = 2

# Sentry settings
SENTRY_DSN = os.environ.get("SENTRY_DSN")
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration(), CeleryIntegration(), RedisIntegration()],
        release=os.environ.get('VERSION'),
        send_default_pii=True,  # associate users to errors
        environment=os.environ.get('ENVIRONMENT'),
    )

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

# Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 15,
}

SIMPLE_JWT = {
    'COOKIE': 'jwt',
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(seconds=seconds_in_a_week),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(seconds=seconds_in_a_week),
    'ALGORITHM': 'HS256',
}

AUTH_USER_MODEL = "user.User"

FILE_UPLOAD_PERMISSIONS = 0o644
DATA_UPLOAD_MAX_NUMBER_FIELDS = None
UPLOAD_MAX_SIZE = int(os.environ.get("UPLOAD_MAX_SIZE", 10485760))

# Cors Header config
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = ast.literal_eval(os.environ.get("CORS_ORIGIN_ALLOW_ALL", "True"))

if "CORS_ORIGIN_WHITELIST" in os.environ:
    CORS_ORIGIN_WHITELIST = os.environ.get("CORS_ORIGIN_WHITELIST").split(',')

# Email configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.environ.get("EMAIL_PORT")

# MJML configuration
MJML_BACKEND_MODE = 'tcpserver'
MJML_TCPSERVERS = [(
    str(os.environ.get('MJML_HOST', 'localhost')),
    int(os.environ.get('MJML_PORT', 28101))
), ]

CONSTANCE_BACKEND = "constance.backends.redisd.RedisBackend"
CONSTANCE_REDIS_CONNECTION = "redis://redis:6379/3"

CONSTANCE_CONFIG = {
    'ADMINS': (
        json.dumps(DEFAULT_ADMINS), 'Admin Emails', str
    ),
}

CONSTANCE_CONFIG_FIELDSETS = {
    'General Options': (
        'ADMINS',
    )
}

ADMINS = json.loads(config.ADMINS)

# Celery configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Debug Toolbar settings
DEBUG_TOOLBAR = get_bool_from_env("ENABLE_DEBUG_TOOLBAR", False)
if DEBUG_TOOLBAR:
    INSTALLED_APPS += [
        "debug_toolbar",
    ]
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
    DEBUG_TOOLBAR_PANELS = [
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.profiling.ProfilingPanel",
    ]
    DEBUG_TOOLBAR_CONFIG = {
        "RESULTS_CACHE_SIZE": 100,
        "SHOW_TOOLBAR_CALLBACK": 'project.base.helpers.debug_toolbar.show_debug_toolbar'
    }

# debug with Silk
ENABLE_DEBUG_SILK = get_bool_from_env("ENABLE_DEBUG_SILK", False)
if ENABLE_DEBUG_SILK:
    INSTALLED_APPS.insert(14, "silk")
    MIDDLEWARE.insert(8, "silk.middleware.SilkyMiddleware")
    SILKY_PYTHON_PROFILER = True

# Testing specific settings
if "test" in sys.argv[1:]:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    ENVIRONMENT = "TEST"
    MIGRATE = False

    print("Testing now")

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]

DOMAIN = os.environ.get("DOMAIN")
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:8892')
BACKEND_DOMAIN = os.environ.get("BACKEND_DOMAIN", "backend.assist-hub.com")
if DOMAIN and not DEBUG:
    CSRF_TRUSTED_ORIGINS = [f'https://*.{DOMAIN}']
    SESSION_COOKIE_SAMESITE = ''
    SESSION_COOKIE_DOMAIN = f'.{DOMAIN}'
    CSRF_COOKIE_DOMAIN = f'.{DOMAIN}'

APPEND_SLASH = False
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760
FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        "TIMEOUT": None,
    },
}

CKEDITOR_UPLOAD_PATH = "ckeditor/"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'allowedContent': True,
    },
    'small': {
        'height': 100,
    },
    'awesome_ckeditor': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            [
                'Source', 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat',
                'TextColor', 'BGColor'
            ],
            '/',
            [
                'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter',
                'JustifyRight', 'JustifyBlock'
            ],
            [
                'Link', 'Unlink',
            ],
            [
                'RemoveFormat',
            ],
            [
                'Image', 'Smiley', 'SpecialChar',
            ],
            [
                'Styles', 'Format', 'Font', 'FontSize',
            ]
        ],
        'height': 300,
        'width': '100%',
    },
}

VERSATILEIMAGEFIELD_RENDITION_KEY_SETS = {
    'logo': [
        ('original', 'url'),
        ('small', 'thumbnail__360x360'),
        ('medium', 'thumbnail__420x60'),
        ('large', 'thumbnail__840x120'),
    ],
    'blog_picture': [
        ('original', 'url'),
        ('image_small', 'thumbnail__60x60'),
        ('image_small_2x', 'thumbnail__120x120'),
        ('image_list', 'thumbnail__255x255'),
        ('image_list_2x', 'thumbnail__510x510'),
    ],
    'project_picture': [
        ('original', 'url'),
        ('image_small', 'thumbnail__60x60'),
        ('image_small_2x', 'thumbnail__120x120'),
        ('image_list', 'thumbnail__255x255'),
        ('image_list_2x', 'thumbnail__510x510'),
    ],
    'team_picture': [
        ('original', 'url'),
        ('image_small', 'thumbnail__120x120'),
        ('image_list', 'thumbnail__255x255'),
        ('image_list_2x', 'thumbnail__510x510'),
    ],
}

SWAGGER_SETTINGS = {
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    'USE_SESSION_AUTH': True,
    "JSON_EDITOR": True,
    'APIS_SORTER': 'list',
    'OPERATIONS_SORTER': 'alpha',
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'Bearer <Token>'
        }
    },
}

WEBSITE_URL = os.environ.get('WEBSITE_URL', 'https://website.assist-hub.com')
